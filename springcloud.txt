springcloud：
	面试题：
		什么是微服务？
		

		微服务之间是如何独立通讯的？
		
			
		springcloud和dubbo有哪些区别
			

		springBoot和springcloud，谈谈对他们的理解
			

		什么是服务熔断？什么是服务降级
			

		微服务的有缺点是什么？说一下在项目中碰到的坑
			

		你说知道的微服务技术栈有哪些？
			

		eureka和zookeeper都可以提供服务注册和发现的功能，请书搜索2个的区别
			
	微服务概述：
		是什么：
			业界并没有统一的，标准的定义，但通常而言，微服务架构是一种架构模式或者说是架构风格，它提倡将单一应用程序划分成一组小的服务，每个服务运行在其独立的自己的进程中，服务之间互相协调，
			互相配合，为用户提供最终价值；服务之间采用轻量级的通信机制互相沟通（通常是基于HTTP的RESTful API）；每个服务豆围绕着具体业务进行构建，并且能够被独立部署到生产环境，类生产环境等；另外
			应尽量避免统一的，集中式的服务管理机制，对具体的一个服务而言，应根据业务上下文，选择合适的语言，工具对其进行构建，可以有一个非常轻量级的集中式管理来协调这些服务，可以使用不同的语言来编写服务，也可以使用不同的数据存储；
			
			技术维度理解：
				微服务话的核心就是讲传统的一站式应用，根据业务拆分成一个一个的服务，彻底地区耦合，每一个微服务提供单个业务功能的服务，一个服务做一件事，从技术角度看就是一种小而独立的处理过程，类似进程概念。能够独自启动或销毁，拥有自己独立的数据库
						

		微服务与微服务架构：
			微服务架构是一种架构模式，它提倡将单一应用程序划分成一组小的服务，服务之间互相协调，互相配合，为用户提供最终价值；每个服务运行在其独立的进程中，服务与服务间采用轻量级的通信机制互相协作（通常是基于HTTP的RESTful API）；每个服务豆围绕着具体业务进行构建，对具体的一个服务而言，应根据业务上下文，选择合适的怨言，工具对其进行构建；

		微服务优缺点：
			优点：
				每个服务足够内聚，足够小，代码容易理解这样能聚焦一个指定的业务功能或业务需求
				开发简单，开发效率高
				松耦合的，开发阶段和部署阶段都是独立的
				可以使用不同语言开发
				微服务只是业务逻辑的代码，不会和html，css或其他界面组件混合
				每个微服务都有自己的存储能力，可以有自己的数据库，也可以有统一的数据库				

			缺点：
				要处理分布式系统的复杂性
				运维难度
				系统部署依赖
				服务间通信成本
				数据一致性
				系统集成测试
				性能监控
	
			
		微服务技术栈：
			多种技术的集合体，服务治理，服务注册，服务调用，服务负载均衡，服务监控....
			服务开发：springnoot，spring springmvc...
			服务配置与管理：
			服务注册于发现：eureka。consul，zookeeper
			服务调用：rest rpc..
			服务熔断器：hystrix，envoy...
			负载均衡：Ribbon，Nginx..
			服务接口调用：Fegin...
			消息队列：
			服务配置中心管理：springcloudconfig...
			服务路由：zuul...
			服务监控：	zabbix...
		
		为什么选择SpringCloud：
			整体解决方案和框架成熟度
			社区热度
			可维护性
			学习曲线
			
			Dubbo/HSF,JSF,MOtan,DubboX
			
			完整的微服务架构，支持Rest，Ribbon支持多种可插拔的序列化的选择，不支持RPC，支持多语言，服务注册与发现Eureka
	
	springcloud入门概述：
		是什么：
			基于Springboot提供了一套微服务解决方案，包括服务注册与发现，配置中心，全链路监控，服务网关，负载均衡，熔断器等组件，除了基于NetFlix的开源组件做高度抽象封装之外，还有一些选型中立的开源组件；
			总结：分布式微服务架构下的一站式解决方案，是各个微服务架构落地技术的集合体
				
		springcloud和springboot的关系：
			springboot专注于快速方便的开发单个个体微服务
		
			springcloud是关注全局的微服务协调治理框架，他将springboot开发的一个个单体微服务整合并管理起来，
			为各个微服务之间提供，配置管理，服务发现。断路器，路由，微代理，时间总线，全局锁，决策竞选，分布式会话等等集成服务

			springboot可以离开speingcloud独立使用开发项目，但是spring'cloud离不开springboot，属于依赖关系
			
		springcloud和dubbo的区别：
			主要区别是dubbo是rpc，springcloud是http的restful api
		
	
	微服务案例：
		springcloud版本Dalston.SR1和boot1.5.9
		
		
		eureka：
			遵守的是AP原则，基于REST服务，用于定位服务，以实现云端中间层服务发现和故障转义；服务注册与发现
			对于微服务架构来说是非常重要的，有了服务发现与注册，只需要使用服务的标识符，就可以访问到服务，而不需要修改服务调用的配置文件了；
			
			Eureka Server提供服务注册和发现
			Service Provider服务提供方将自身服务注册到Eureka，从而使服务消费方能够找到
			Service Consumer服务消费方从Eureka获取注册服务列表，从而能够消费服务

		eureka自我保护：
			某一时刻，耨一个微服务不可用了，eureka不会立刻清理，依旧会对改微服务的信息进行保

			默认情况下，如果eurekaserver在一定时间内没有接收到某个微服务实例的心跳，EurekaServer将会注销改实例（默认是90秒）；
			但是当网络分区故障时，微服务与EurekaServer之间无法正常通信，以上行为可能变得非常危险了--因为微服务本身其实是健康的，此时不应该注销这个微服务；Eureka通过自我保护模式来解决这个问题--当EurekaServer节点在短时间内丢失过多客户端（可能网络发生了网络分区故障），
			那么这个节点就会进入自我保护模式；一旦进入该模式，EurekaServer就会保护服务注册表中的信息，不在删除服务注册表中的数据（也就是不会注销任何微服务）；当网络故障恢复后，该EurekaServer节点会自动推出自我保护模式；
			
			在自我保护模式中，Eureka Server会保护服务注册表中的信息，不在注销任何服务实例；当他收到的心跳数重新恢复到阈值以上时，该EurekaServer节点就会自动推出自我保护模式

			在Spring Cloud中，可以使用euraka。server、enable-self-preservation = false禁用自我保护模式

		zookeeper保证cp，spring cloud保证ap
		
		
		RIbbon负载均衡：
			是基于Netfilx Ribbon实现的一套客户端 负载均衡的工具

			简单的说，Eibbon是Netflix发布的开源项目，主要功能是提供客户端的软件负载均衡算法，将Netflix的中间服务连接在一起；
			Ribbon客户端组件提供一系列完善的配置型比如连接超时，重试等；简单的说，就是在配置文件中列出Load Balance后面所有的机器，Ribbon会自动的帮助你基于某种规则去连接这些机器，也可以自定义负载均衡算法；
			
			
			配置：
				jar包导入maven
				主配置类开启服务
			Ribbon和eureka整合后Consumer可以直接调用服务而不再关心地址和端口号

			Ribbon核心组件Rule：
				
				ROundRobinRule：轮询
				RandomRule：随机
				AvailabiliFilteringRulr：会先过滤由于多次访问故障而处于断路器跳闸状态的服务，还有并发的连接数量超过阈值的服务，然后对剩余的服务列表按照轮询策略进行访问
				WeightResponseTimeRulr：根据平均响应时间计算所有服务的权重，响应时间越快服务权重越大被选中的概率越高               刚启动是如果统计信息不足，则使用RoundRobinRule 策略，等统计信息足够会切换回来
				RetryRule：先按照RoundRobinRule的策略获取服务，如果该服务获取失败则在指定时间内会进行重试，获取可用的服务
				BestAvailableRule：会先过滤掉由于多次访问故障而处于断路器跳闸状态的服务，然后选择一个并发量最小的
				ZoneAvoidanceRule：默认规则，符合判断server所在区域的性能和server的可用性选择服务器	

				自定义负载均衡算法：
					这个自动以配置类不能放在@ComponentScan锁扫描的当前包以及子包下，否则自定义的这个配置类就会被所有的Ribbon客户端共享

			Feign：
				是一个声明式WebService客户端，使用Feign能让编写Web Service客户端更加简单，他的使用是定义一个接口，然后在上面添加注解，同事也支持JAX_RS标准的注解；
				Feign也支持插拔式的编码器和解码器；Spring Cloud对Feign进行了封装，使其支持了Spring MVC标准注解和HttpMessageConverters；Feign可以与Eureka和Ribbon组合使用可以支持负载均衡
				
				
			Hystrix断路器：
				服务熔断：出现异常或者服务故障
				服务降级：是从整体符合考虑，就是当某个服务熔断之后，服务器将不再被调用，此时客户端可以自己转呗一个本地的fallback回调，返回一个缺省值

			服务监控hystrixdashboard：
				概述：
					除了隔离以来服务的调用以外，Hystrix还提供了准实时调用监控，hystrix会持续地记录所有通过Hystrix发起的请求的执行信息，并已统计报表和图形的形式展示给用户，包括每秒执行多少请求多少成功，多少失败等；
					Netflix通过hystrix-metrics-event-stream项目实现了对以上指标的监控；spring cloud也提供了Hystrix Dashboard的整合，对监控内容转化成可视化界面
												
		Zuul：
			ZUul包含了对请求的路由和过滤2个最主要的功能：
				其中路由功能负责将外部请求转发到具体的微服务实例上，是实现外部访问统一入口的基础而过滤功能将负责对请求的处理过程进行干预，是实现请求检验，服务聚合等功能的基础Zuul和Eureka进行整合，将Zuul自身注册为Eureka服务治理下的应用，同时
				从Eureka中获得其他微服务的消息，也即以后的访问微服务都是通过Zuul跳转后获得
				
			提供=代理+路由+过滤 三大功能
			

