组件注册：
	@Configuration：
		放在类上说明这是一个配置类；		

	@Bean：
		给容器中注册一个Bean，类型为返回值的类型，id 默认是用方法名的id；				
		可以指定名字@Bean（""）,
	
	@ComponetScan:
		包扫描，可以指定扫描的组件(需要禁用掉useDefaultFilters = false)，也可以排除扫描的组件（excludeFilters={@Filter（）}）
		
		规则：
			FileterType.annotion，注解方式
			FileterType.ASSINGABLE_TYPE,按照指定的类型
			FileterType.ASPECJ：使用aspecTj表达式
			FileterType.CUSTOM：使用自定义规则
			...
			

		自定义TypeFilter指定过滤规则：
			1：写一个实现FileterType的类；
			2：match方法中的2个参数：metadataReader：读取到的当前正在扫描的类的信息；
				metadataReaderFactory：可以获取到其他任何类的信息；
				
				AnnotationMetadata：获取当前类注解的信息；
				ClassMetadata：获取当前正在扫描的类的类信息
	
	@Scope：
		设置组件作用域；
		
		可以取值：
			prototype：多实例的，IOC容器启动会调用方法创建对象放到IOc容器中，以后每次获取就是直接从容器中拿；
			singleton：单实例的，默认值，IOC容器完成，获取的时候调用
	
	@Lazy-bean：
		懒加载，单实例bean；
		容器启动不创建对象，第一次使用bean创建对象，并初始化；

	@Conditional({Condition})：
		按照条件注册bean，满足条件给容器中注册bean
	
		用在方法和类上
			方法：针对当前方法
			类：类中组件统一设置，满足当前条件，这个勒种的所有bean注册才能生效；		
	
		自定义一个类实现Condition，重写matches方法
		conditionContext：判断条件能使用上下文
		AnnotatedTypeMetadata：注释信息		
	
	给熔器中注册组件的方法：
		包扫描+组件注解；
		@bean，导入的第三方包里面的组件
		@Import	
		使用Spring提供的FactoryBean（工厂bean）	
		
	@import:
		给容器中快速导入一个组件，
		
		id默认是组件的全类名，
		
		importSelector：
			返回需要岛屿的组件的全类名数组
			
			自定义一个类实现ImportSelector接口，
			selectimports方法的返回值就是导入到容器中的组件全类名
			AnnotationMeatadata：当前标注@import注解的类的所有注解信息，
			方法不能返回null值，需要返回的是一个String数组，数组中是全类名；
		registerBeanDefinition：
			定义一个类实现ImportBeanDefinitionRegistrar
			
			AnnotationMetadata：当前类的注解信息
			BeanDefinitionRegistry：BeanDefinition注册类
		
	使用Spring提供的FactoryBean（工厂bean）：
		自定义一个类实现FactoryBean；

		getObject方法返回一个对象，这个对象注册到容器中	

		默认获取到的是工厂bean调用getObject创建的对象，
		要获取工厂bean本身，需要给id前面加一个&；
	bean生命周期：
		bean创建 初始化  销毁的过程
		容器管理bean的生命周期，可以自定义初始化和小辉方法
		初始化：
			对象创建完成，并赋值号，调用次方法
		销毁：
			单实例容器销毁的之后，多实例的bean容器不会管理这个bean，容器不会调用销毁方法

		@Bean指定初始化和销毁方法：
			在xml中有init-method destory-method
			
			@Bean（initMethod='方法名',destoryMethod='方法销毁' ）
				
			通过让bean实现InitializingBean(定义初始化)，DisposableBean(销毁)

			使用JSR250，@PostConstruct：在bean创建完成并且属性赋值完成，执行初始化，@PreDestory：在容器销毁bean之前通知进行清理工作

			BeanPostProcessor：
				
				自定义一个类实现BeanPostProcessor				

				bean的后置处理器，在bean初始化前后进行一些处理工作：
				postProcessBeforeInitialization：在初始化之前工作
				postProcessAfterInitiallization：在初始化之后工作

		BeanPostProcessor原理：
			遍历得到容器中所有的BeanPostProcessor；挨个执行beforeInitialization，一旦返回null，跳出for循环，不会执行后面的BeanPostProcessor.postProcessors
		
			源码具体的执行逻辑：
				populateBean(beanName,mbd,instanceWrapper),给bean进行属性赋值
				initializeBean
				{
				applyBeanPostProcessorsBeforeInitialization（...）
				invokeInitMethods（...），执行自定义初始化
				applyBeanPostProcessorsAfterInitialization（...）
				}
		BeanPostProcessor在spring底层的使用：
			bean的赋值，注入其他组件，@Autowired，生命周期注解功能，....
		
	属性赋值：
		@Value赋值：
			基本的数值，
			可以写Spel表达式，#{}
			可以写${}，取出配置文件中的值(在运行环境变脸里面的值)
		@PropertySource加载外部配置文件：
			在配置类上使用@PropertySource(value={})读取外部文件中的值，


	自动装配：
		spring利用依赖注入，完成对IOC容器中各个组件的依赖关系赋值		

		@Autowired：
			自动注入，构造器，参数，方法，属性
			默认优先按照类型去容器中找对应的组件，类.class
			如果找到了多个相同类型组件，再将属性的名称作为组件的id去容器中查找，
			@Qualifier（），指定需要装备的组件id，而不是属性名，
			自动装配默认一定要将属性赋值好，没有就会报错，
			@Autowired(required=false)可以指定是否必须，
			
			@Primary：
				让spring进行自动装配时，默认装配首选的bean，也可以继续使用@qulifire指定需要装配的bean的名字
		@Resource(JSR250)和@Inject(JSR330)，都是java规范的注解：
			resource：默认是按照组件名称装配的，可以指定name；没有支持 primary required
			Inject：需要导入javax inject的包和autowired的功能一样，inject没有required功能；

		方法，构造器位置的自动装配：
			@Autowired：
				构造器，方法，属性，参数、都是从容器中获取参数组件的值
				标注在方法上，spring容器创建当前对象，就会调用方法，完成赋值，
				方法使用的参数，自定义类型的值从ioc容器中获取；
				
				标注在构造器上，默认加在ioc容器中的组件，容器启动会调用无参构造器创建对象，在进行初始化赋值操作，
				构造器要用的组件也是从容器中获取；
				
		Aware注入spring底层组件和原理：
			自定义组件实现xxxAware；在创建对象的时候，会调用接口规定的方法注入相关组件；
			Aware：把spring底层一些组件注入到自定义的Bean中；
			xxxAware：功能 使用xxxProsessor；	


	@Profile环境搭建：
		spring提供的可以根据当前环境动态的激活和切换一系列组件的功能；
		
		夹了环境标识的bean，只有这个环境被激活的时候才能注册到容器中，默认是default
		
		加在配置类上，只有指定环境的时候，整个配置类里面的所有配置才能开始生效；		
	
		没有标注环境标识的bean，在任何环境下都加载；		

		激活环境：
			使用命令行动态参数：在虚拟机参数位置加载 -Dspring.profiles.active=test
			
			创建一个applicationcontext
			设置需要激活的环境
			注册配置类
			启动刷新容器；
			
			
AOP：
	指在程序运行期间将某段代码切入到指定方法指定位置进行运行的变成方式；底层使用动态代理；
	
	将业务逻辑组件和切面类都假如到容器中，告诉spring那个是切面(@Aspect)
	在切面类上每一个通知方法上标注通知注解，告诉spring何时何地运行；
	开启基于注解的aop模式；
	
	aop原理：
	
		@EnableAspectJAutoProxy：
			@Import（AspectJAutoproxyRegister.class）,给容器中导入AspectJAutoproxyRegister
			利用AspectJAutoproxyRegister自定义给容器中注册Bean
			internalAutoProxyCreator=AnnotationAwareAspectJAutoProxycreator
			给容器中注册一个AnnotationAwareAspectJAutoProxyCreator；
			
		AnnotationAwareAspectJAutoProxyCreator：
			AnnotationAwareAspectJAutoProxyCreator
				->AspectjAwareAdvisorAutoProxyCreator
					->AbstractAdvisorAutoProxyCreator
						->AbstractAutoProxyCreator
							implements SmartInstantionAwareBeanPostProcessor,BeanFactoryAware
							关注后置处理器(在bean初始化完成前后做的事情)，自动装配BeanFactory
									
							>AbstractAutoProxyCreator.setBeanFactory()
							>AbstractAutoProxyCreator.有后置处理器逻辑


							>AbstractAdvisorAutoProxyCreator.setBeanFactory() ->initBeanFactory()

							
							AnnotationAwareAspectJAutoProxyCreator.initBeanFactory()
							
							流程：
								传入配置类，创建ioc容器；
								注册配置类，调用refresh（）刷新容器；
								registerBeanPostProcessor(beanFactory)，注册bean的后置处理器，来拦截bean的创建；
									先获取ioc容器已经丁定义了的需要创建对象的所有BeanpostProcessor
									给容器中加别的beanpostprocessor
									优先注册实现了PriorityOrdered接口的BeanPostProcessor；
									在给容器中注册实现了Ordered接口的BeanPostProcessor；
									注册没实现优先级接口的BeanPostProcessor；
									注册BeanpostProcessor，实际上就是创建BeanPostProcessor，保存在容器中
										创建internalAutoProxyCreator的BeanPostProcessor
										创建bean的实实例
										populateBean，给bean的各种属性赋值
										initializeBean，初始化bean；
											invokeAwareMethods()：处理Aware接口的方法回调
											applyBeanPostProcessorsBeforeInitialization()：应用后置处理器的BeforeInitialization()
											invokeInitMethods：执行自定义初始化方法
											applyBeanPostProcessorsAfterInitialization()：执行后置处理器的postProcessAfterInitialization（）
										BeanPostProcessor(AnnotationAwareAspectJAutoProxyCreator)创建成功；
									把BeanPostProcessor注册到BeanFactory中：
										beanFactory.addBeanPostProcessor(postProcessor)；
								AnnotationAwareAspectJAutoProxyCreator的执行时机：
									AnnotationAwareAspectJAutoProxyCreator =>InstantiationAwareBeanPostProcessor
									finishBeanfactoryInitialization(beanFactory);完成BeanFactory初始化工作，创建剩下的单实例bean
										遍历获取容器中所有的Bean，依次创建对象getBean(beanName)
											getBean调用dogetBean在调用getSingleton
											创建Bean
												【AnnotationAwareAspectJAutoProxyCreator在所有bean创建之前会有一个拦截，InstantiationAwareNeamPostProcessor。会调用postPrecessorbeforeInstantiation()】
												先从缓存中获取当前bean，如果能获取到，说明bean之前是被创建了；直接使用；否则再创建；
												只要创建好的bean都会被缓存起来；
												createBean()，创建bean
													【BeanPostProcessor是在Bean对象创建完成初始化前后调用的】
													【InstantiationAwarePostProcessor是在创建bean实例之前先尝试用后置处理器返回对象的】
													resolveBeforeInstantiation(beanName，mbdToUse)；解析beforeInstantiation	
														希望后置处理器再次能返回一个代理对象，如果能返回代理的对象就使用，否则就继续
															后置处理器先尝试返回对象：
																bean=applybeanPostProcessorsBeforInstantiation（）
																	拿到所有后置处理器，如果是InstantiationAwareBeanPostProcessor；就执行postProcessorBeforeInstantiation
																bean ！=null
																bean = applyBeanPostProcessorAfterInitialization（）
														doCreateBean()，真正的去创建一个bean实例；
														在
									
									AnnotationAwareAspectJAutoProxyCreator 【InstantiationAwareBeanPostPeocessor】的作用：
										每一个bean创建之前，调用postProcessorBeforeinstantiation()；
											关心自定义的Bean的创建
											判断当前bean是否在advisedBean中(保存了所有需要增强的bean)；
											判断当前bean是否是基础类型Advice，pointcut....，或者是否是切面(@Aspect)
											是否需要跳过
												获取候选的增强器(切面里面的通知方法)
													每一个封装的通知方法的增强器是InstantitionModelAwarePointcutAdvisor；
													判断每一个增强器是否是AspectJPointcutAdvisor类型的，返回true
												永远返回false
										创建对象：
											postProcessAfterInitialization()；
												包装如果需要的情况下，
													获取当前bean的所有增强器(通知方法)
														找到候选的所有增强器(找那些通知方法是需要切入当前bean方法的)
														获取到能在当前bean使用的增强器
														给增强器排序
													保存当前bean在adcisedBean中
													如果当前bean需要增强，创搭建当前bean的代理对象
														获取所有增强器(通知方法)
														保存到proxyFactory
														创建代理对象：
															JDK，cglib
														给容器中返回当前组件使用cglib增强了的代理对象；
														以后容器中获取到就是这个组件的代理对象，执行目标方法的时候，代理对象就会执行通知方法的流程；
									获取拦截器链-MethodInterceptor：
										容器中保存了组件的代理对象(增强后的对象)，这个对象保存了详细信息(增强器，目标对象...)
											cglibAopProxy.interceptor()；拦截目标方法的执行
											根据ProxyFactory对象获取将要执行的目标方法拦截器链：
												List<Object> chain = this.advised.getINterceptorsAndDynamicInterceptionAdvice
												创建一个list 保存所有拦截器，指定长度5，一个默认的ExposeInvocationInterceptor和4个增强器；
												遍历所有增强器，将其转为Interceptor；
												将增强器转为MethodInterceptor：
													如果是，直接阿加入到集合中
													如果不是使用advisorAdaptar将增强器转为methodInterceptor
													转换完成，返回methodINterceptor数组；
												
													
											如果没有拦截器链，直接执行目标方法
												连接器链，每一个通知方法又被包装为方法拦截器，利用methodInterceptor
											如果有拦截器链，把需要执行的目标对象，木白哦方法，拦截器链邓的信息传入创建一个CglibMethodInvocation对象并调用proceed方法，返回值
											连接器链的触发过程：
												如果没有拦截器，直接执行目标方法，或者拦截器的索引和拦截器数组-1大小一样(指定到了最后一个拦截器)执行目标方法；
												链式获取每一个拦截器，拦截器执行invoke方法，每一个拦截器等待下一个拦截器执行完成返回以后再来执行，拦截器链的的机制，保证通知方法与目标方法顺序执行；
												
								总结：
									@EnableAspectJAutoProxy开启AOP功能，给容器中注册一个组件AnnotationAwareAspectJAutoProxyCreator
									AnnotationAwareAspectJAutoProxyCreator是一个后置处理器
									容器的创建流程：
										registerBeanPostProcessors 注册后置处理器，创建AnnotationAwareAspectJBeanPostProcessor
										finishBeanFactoryInitialization（）初始化剩下的单实例Bean
											创建业务逻辑组件和切面组件
											AnnotationAwareAspectJAutoProxyCreator拦截组件创建过程
											组件创建之后判断组件是否需要增强
												是：切面的通知方法，包装成增强器，给目标对象创建一个代理对象
									执行目标方法
										代理对象执行目标方法
										cglibProxy.interceptor（）
											得到目标方法的拦截器链(zengqiang qi baozhuang cheng lanjieqi MethodInterceptor)
											利用拦截器的链式机制，一次进入每一个拦截进行执行；
										效果：
											正常执行：前置-目标方法-后置-返回
											出现异常：前置-目标方法-后置-异常

声明式事务：
	原理：
		@EnableTransactionMangement利用TransactionMangementConfigurationSelector给容器中会导入组件
		导入2个组件
			autoProxyRegistar，ProxyTransactionMangementConfiguration
		autoProxyRegistar：
			给容器中注册一个InfrastructureAdvisorAutoProxyCreator组件
				AnnotationAwareAdvisorAutoProxyCreator组件：
				利用后置处理器机制在对象创建以后，包装对象，返回一个代理对象(增强器)，代理对象执行方法利用拦截器链进行调用；
		ProxyTransactionMangementConfiguration：
			给容器中注册事务增强器；
				事务增强器要用事务注解的信息，
				事务拦截器：
					ttransactionInterceptor，保存了事务属性信息，事务管理器
					是一个Methodinterceptor

扩展原理：
	BeanPostProcessor：
		bean后置处理器，bean创建对象初始化前后工作
	BeanFactoryPostProcessor：
		beanfatory处理器，在BeanFactory标准初始化之后调用，所有的bean定义已经加载保存到beanfatory，但是还没有创建bean的实例；
		
		ioc容器创建对象
		invokeBeanfactoryPostProcessors(beanFactory)，执行BeanfactoryPostProcessor
			直接在BeanFactory中找到所有类型是BeanFactoryPostProcessor的组件，并执行他们的方法，
			在初始化创建其他组件前面执行
	BeanDefinitionRegistryPostProcessor：
		postProcessorbeanDefinitionRegistry()，在所有bean定义信息将要被加载，bean实例还未创建的时候执行
		优先于BeanFactoryPostProcessor执行，利用BeanDefinitionRegistryPostProcessor给容器中在额外添加组件，
	
	ApplicationListener用法：
		监听容器中发布的是事件，事件驱动模型开发；
		
		监听ApplicationEvent及其下面的子事件，
		
		步骤：
			写一个监听器监听某个事件(Applicationevent及其子类)
			把监听器加入到容器中
			只要容器中有相关事件的发布，就能监听到这个事件，
			发布事件：
				applicationcontext.publish();
			原理：
				contextRefreshhedEvent事件：
					容器创建对象，
					容器刷新完成，
					publishEvent（new contextRefreshEvent（）），
						事件发布流程：
							获取事件的派发器，
							muticastEvent派发事件：
							获取到所有的ApplicationListener
								判断Excutor，有，支持使用异步派发
								否则同步的方式直接执行listener方法，invokeListener（listener，event）
								拿到listener回调onApplicationEvent方法；
							
						容器有哪些监听器：
							容器创建对象；
							registerListeners();
								从容器中拿到所有的监听器，把他们注册到applicationEventMulticaster中；
								Strig[] listenerBeanNames = getbeanNamesForType(ApplicationListener.calss,true,false);
								将listener注册到ApplicationMuticastEvent
			@EventListener和SmartInitializingSingleton：
				
				EvemtListener使用EventListenerMethodProcessor处理器来解析方法上的@EventLitener
					
				SmartInitializingSingleton：
					ioc创建对象并刷新容器；
					初始化剩下的单实例bean；
						先创建所有的单实例bean；
						获取所有创建好的单实例bean，判断是否是SmartInitializingSingleton：类型的；
							如果是就调用afterSingletonInstaniated（）；
		
	Spring容器创建：
		BeanFactory预准备：
			prepareRefresh()，预处理
				initPropertySources()，初始化一些属性设置，子类自定义属性设置方法；
				getEnvironment().validateRequiredProperties();校验属性的合法等
				this.earlyApplicationEvents = new LinkedHashSet<ApplicationEvent>();保存容器中的一些早期事件；
			obtainFreshBeanFactory()：获取beanFactory
				refreshBeanFactory();刷新beanfactory
					创建了一个this.beanFactory = new DefaultListableBeanFactory();设置id；
				getBeanFactory();返回GenericApplicationContext刚刚创建的beanFactory对象；
				将创建好的BeanFactory【DefaultListableBeanFactory】返回；
			
			prepareBeanFactory(beanFactory)：
				BeanFactory的与准备工作(BeanFactory进行一些设置)
					设置BeanFactory的类加载器，表达式解析器....
					添加部分BeanPostProcessor
					设置于忽略的自动装配的接口；
					注册可以自动解析的自动装配；
					添加BeanPostProcessor【ApplicationListenerDetector】；
					添加编译时的AspectJ支持；
					给BeanFactory中注册一些能用的组件；
			
			postProcessBeanFactory(beanFactory)：
				BeanFactory准备工作完成进行的后置处理工作；
					
				子类通过重写这个方法来在BeanFactory创建并与准备完成以后做进一步设置；
				
		执行BeanFactoryPostProcessor：
			invokeBeanFactoryPostProcessors(beanFactory)：
				执行BeanFactoryPostProcessor，BeanFactory的后置处理器，在BeanFactory标准初始化之后执行的；
				2个接口：
					BeanFactoryPostProcessor
					BeanDefinitionRegistryPostProcessor
				
				执行BeanFactoryPostProcessor的方法：
					获取所有的beanDefininationRegistryPostProcessor;
					看先执行优先级排序
					最后执行没有任何优先级或者是顺序接口的beanDefininationRegistryPostProcessor;
					
				在执行BeanFactoryPostProcessor：
					获取所有的BeanFactoryPostProcessor；
					看先执行优先级排序
					最后执行没有任何优先级或者是顺序接口的beanDefininationRegistryPostProcessor;
			
			registerBeanPostProcessors(beanFactory)：
				注册BeanPostProcessor【bean的后置处理器】
				不同接口类型的BeanPostProcessor在Bean创建前后的执行时机是不一样的；				
				BeanPostProcessor，DestructionAwareBeanPostProcessor，InstantiationAwareBeanPostProcessor，SmartInstantiationAwareBeanPostProcessor，MegerdbeanDefinitionPostProcessor

				获取所有的BeanPostProcessor；后置处理器都默认可以有PriorityOrdered，ordered接口来执行优先级；
				先注册PriorityOrdered优先级接口的BeanPostProcessor：
					把每一个BeanPostProcessor添加到BeanFactory中
				在注册实现了ordered接口的
				最后注册没有实现任何优先级接口的
				最终注册MegerdbeanDefinitionPostProcessor；
				注册一个ApplicationLitenerDetector来在bean创建完成之后检查是否是ApplicationListener
			
			initMessageSource()：
				初始化MessageSource组件(做国际化功能，消息绑定，消息解析)	
				
				获取Beanfactory;
				看容器中是否有id为MessageSource的组件。有赋值给MessageSource，如果没有自己创建一个DelegatingMessageSource；
					messageSource：取出国际化配置文件中的某个key的值；
				把创建好的messageSource注册在容器中
			
			initApplicationEventMulticaster()：
				初始化时间派发器，监听器等；

				获取BeanFactory
				从Beanfactory获取applicationEventMulticaster的ApplicationEventMulticaster；
				如果没有配置创建一个SimpleApplicationEventMulticaster
				将创建的SimpleApplicationEventMulticaster添加到BeanFactory中
			
			onRefresh()：
				留给子容器(子类)；
				子类重写这个方法，在容器刷新的时候可以自定义逻辑；
			
			registerListeners()：
				给容器中将所有项目里面的ApplicationListener注册进来；
				
				从容器中拿到所有的ApplicationLitener组件
				将每个监听器添加到事件派发器中；
				派发之前步骤产生的事件；

			finishBeanFactoryInitialization(beanFactory)：
				初始化所有剩下的单实例Bean；

				// Instantiate all remaining (non-lazy-init) singletons.
				beanFactory.preInstantiateSingletons()：
					获取容器中的所有Bean，依次进行初始化和创建对象
					获取Bean的定义信息
					判断不是抽象的，是单实例的，是懒加载的
					判断是否是FactoryBean，是否实现了FactoryBean接口的Bean；
						不是工厂Bean，利用getBean（）创建对象
					获取中获取不到，开始Bean的创建对象流程
					先标记当前bean已经被创建
					获取bean的定义信息
					获取当前bean依赖的其他bean，如果有还是按照getBean（）把依赖的Bean创建出来；
					启动单实例Bean的创建流程
						CreateBean（）；
						让BeanPostProcessor先拦截返回代理对象
					如果没有返回代理独享，则doCreateBean（）；
						创建Bean实例：
							利用工厂方法或对象的构造器
						调用Megered...Processor的方法
						populateBean（），Bean属性赋值：
							赋值之前：
								获取InstantiationAwareBeanPostProcessor后置处理器；
								...
								applyPropertyValue，应用Bean属性的值，为属性利用setter方法等进行赋值
								
						bean初始化，IniializationBean：
							执行Awar接口的方法，xxxAware的方法
							applyBeanPostProcessorsBeforInitiaLization（）：
								BeanPostProcessor.PostProcessorsBeforInitiaLization（）；
							invokeInitMethods（），执行初始化方法
							applyBeanPostProcessorsAfterInitiaLization（），执行初始化之后
								BeanPostProcessor
							注册bean的销毁方法
						将创建的Bean添加到缓存中，singletonObjects
			finishRefresh()，完成BeanFactory的初始化创建工作，IOC创建完成：
				


servlet3.0：




	servlet和SpringMVC整合：
		web容器在启动的时候会扫描每个jar包下的META_INF、services/...
		加载这个指定的SpringServletContainerInitializer
		spring的应用一启动会加载感兴趣的WebApplicationInitializer接口下的所有组件
		并且为WebApplicationInitializer组件创建对象()组件不是接口，不是抽象类
			AbStractContextLoaderinitializer:
				创建根容器，createRootApplicationContext（）；
			AbstractDispatcherServletInitializer：
				创建一个web的ioc容器
				创建一个createDispatcherServlet，
				将创建的DispatcherServlet添加到ServletContext中；
			
			AbstractAmmotationConfigDispatcherServletInitializer：
				注解方式配置的DispatcherServlet初始化器
				创建webioc容器：createServletApplicationContext（）；
					获取配置类
		以注解方式启动SpringMVC：
			继承AbstractAmmotationConfigDispatcherServletInitializer；
			实现抽象方法指定DispatcherServlet配置信息；
	
	定制springmvc：
		@EnableWebMvc：开启SpringMVC定制功能相当于<mvc: annotation-driven/>
		配置组件(视图解析器，视图映射，等等)
		定义一个类实现WebMvcConfig（继承WebMvcConfigAdapter）
			定制：
				视图解析器：
					confgiureViewresolvers();
					默认所有的页面都从/WEB-INF/
					registry.jsp（“/WEB-INF/”，“.jsp”）；
				静态资源访问：
					ConfiguredefaultServbletHandling();
					configure.enable();
				拦截器：
					addInterceptors（）；
					registry.addInterceptor().addPathPattenrs（‘/**’）;
						自定义一个类实现HandlerInterceptor
	异步请求(servlet3.0)：
		开启异步处理asyncSupported=true；
		开启异步模式
			AsyncContext startAsync = request.startAsync（）；
			start.Async.start（new Runnnable（）{
				run(){
					调用业务逻辑；
					startAsync.complete（）；
					AsyncContext asyncContext = request.getAsyncContext（）；
					获取响应ServletResponse；
					
				}
			}）
	springMVC异步请求：
						
		控制器返回callable；
		SpringMVC异步处理，将callable提交到TaskExecutor，使用一个隔离的线程执行
		DispatcherServlet和所有的Filter推出web容器的线程，但是response保持打开状态
		callable返回结果，springmvc将请求重新派发给容器，恢复之前的处理
		根据callable返回的结果，speingmvc继续进行视图渲染流程等(从手请求-视图渲染)；
	
		异步的拦截器：
			原生的APIAsyncLitener
			SpringMVC：实现ASYNCHandlerInterceptor
		
		DeferredResult：
			















						
				
				
				
				














							

















						在目标方法执行的时候执行拦截器链，
						事务拦截器：
							先获取事务相关的属性
							在获取PlatformTransactionMangement，如果事先么有添加指定任何transactionmangement。最终会从容器中按照类型获取一个platformtransactionmangement
							执行目标方法：
								如果异常，获取到事务管理器，利用事务管理器提交
								如果正常，利用事务管理器提交
						

		
												





														
								


















			









